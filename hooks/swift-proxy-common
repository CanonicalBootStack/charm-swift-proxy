#!/bin/bash
set -u
# For openssl cert generation
COUNTRY=$(config-get country)
STATE=$(config-get state)
LOCALE=$(config-get locale)
COMMON_NAME=$(config-get common-name)
PPA=$(config-get swift-release)

DEFAULT_ETH=$(ip route  | grep default | awk '{ print $5 }')
IP=$(ifconfig  $DEFAULT_ETH | grep 'inet addr' | awk '{ print $2 }' | cut -d: -f2)

# Used in proxy-server.conf.  Run one worker per cpu core for now
CORES=$(cat /proc/cpuinfo | grep processor | wc -l)

# TODO: Need to use different addresses for internal swift traffic
# as this the only security measure in place is network isolation
PROXY_LOCAL_NET_IP=$IP

# Use apache2 to distribute ring config until there is support
# for file xfer in juju
PACKAGES="swift swift-proxy memcached apache2"
WWW_DIR="/var/www/swift-rings"
SWIFT_HASH_FILE="/var/lib/juju/swift-hash-path.conf"

# Ring configuration
PARTITION_POWER=$(config-get partition-power)
REPLICAS=$(config-get replicas)
MIN_HOURS=$(config-get min-hours)

# generate the swift hash to be used for salting URLs of objects.
# TODO: its important this is never lost, find out some way of getting
# it off the server and into a sys admins INBOX?
if [[ ! -e $SWIFT_HASH_FILE ]] ; then
  juju-log "swift-proxy: Generating a new SWIFT_HASH in $SWIFT_HASH_FILE"
  echo $(od -t x8 -N 8 -A n </dev/random) >$SWIFT_HASH_FILE
fi

function set_swift_hash {
  # TODO: Do this with augeas and put in a utility function for use elsewhere
  cat >/etc/swift/swift.conf <<EOF
[swift-hash]
# random unique string that can never change (DO NOT LOSE)
swift_hash_path_suffix = `cat $SWIFT_HASH_FILE` 
EOF
}

function create_proxy_conf {
cat >/etc/swift/proxy-server.conf <<EOF
[DEFAULT]
cert_file = /etc/swift/cert.crt
key_file = /etc/swift/cert.key
bind_port = 8080
workers = $CORES
user = swift

[pipeline:main]
pipeline = healthcheck cache tempauth proxy-server

[app:proxy-server]
use = egg:swift#proxy
allow_account_management = true

[filter:tempauth]
use = egg:swift#tempauth
user_system_root = testpass .admin https://$PROXY_LOCAL_NET_IP:8080/v1/AUTH_system

[filter:healthcheck]
use = egg:swift#healthcheck

[filter:cache]
use = egg:swift#memcache
memcache_servers = $PROXY_LOCAL_NET_IP:11211
EOF
}

function initialize_ring {
  # $1 is ring name. 
  # $PARTITION_POWER, $REPLICAS, $MIN_HOURS from config above
  swift-ring-builder /etc/swift/$1.builder \
    create $PARTITION_POWER $REPLICAS $MIN_HOURS
}

function get_zone {
  # a hack to assign units to zones until config is taken care of
  # in juju
  zone_file="/var/run/juju/swift-zone"
  checked_in="/var/run/juju/checked-in"
  if [[ -e $checked_in ]] ; then
    # changed relation seems to run twice? dont get new zone if 
    # we just got one
    cat $checked_in | grep $JUJU_REMOTE_UNIT >/dev/null
    if [[ $? == 0 ]] ; then
      ZONE=$(cat $checked_in | grep $JUJU_REMOTE_UNIT | cut -d, -f2)
      return 0
    fi
  fi
  if [[ ! -e $zone_file ]] ; then
    echo 1 > $zone_file
  fi
  ZONE=$(cat $zone_file)
  echo "$JUJU_REMOTE_UNIT,$ZONE" >>$checked_in
  if [[ $ZONE == $REPLICAS ]] ; then
    echo 1 >$zone_file
    return 0
  fi
  echo $[$ZONE+1] >$zone_file
}

function add_to_ring {
  # swift-ring-builder returns 1 for success, 2 for zero.
  # TODO: File bug for return codes
  juju-log "swift-proxy: Updating $1 ring. Adding $IP:$PORT, zone $ZONE, device $DEVICE"
  swift-ring-builder /etc/swift/$1.builder add \
    z$ZONE-$IP:$PORT/$DEVICE 100
  rc=$?
  if [[ $rc == "1" ]] ; then
    juju-log "Added to ring: $IP:$PORT, zone $ZONE, device $DEVICE"
    return 0
  else
    juju-log "swift-proxy: Failed to add to ring."
    return 1
  fi
}

function exists_in_ring {
  swift-ring-builder /etc/swift/$i.builder \
    search z$ZONE-$IP:$PORT/$DEVICE
  [[ $? == "1" ]] && return 0
  return 1
}

function rebalance_ring {
  # rebalance returns 0 on success, go figure
  juju-log "Rebalancing ring $1"
  swift-ring-builder /etc/swift/$i.builder rebalance
  return $?
}
\
function add_ppa {
  # Don't configure PPA, install from archive.
  [[ $PPA == "distro" ]] && return 0
  . /etc/lsb-release
  [[ $PPA == "milestone" ]] && PPA="release"
  PPA_URL="deb http://ppa.launchpad.net/swift-core/$PPA/ubuntu $DISTRIB_CODENAME main"
  add-apt-repository "$PPA_URL" || exit 1
}

